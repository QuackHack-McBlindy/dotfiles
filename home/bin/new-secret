#!/bin/bash

# Check if the script is run as root
if [ "$EUID" -ne 0 ]; then
  echo -e "\033[1;31m[ERROR]\033[0m Sudo Please!"
  exit 1
fi

# Colors for happy output
GREEN="\033[1;32m"
YELLOW="\033[1;33m"
CYAN="\033[1;36m"
RED="\033[1;31m"
RESET="\033[0m"

# Prompt for the secret name
echo -e "${CYAN}Secret name?${RESET}"
read -r secret_name

# Define file paths
yaml_file="/var/lib/sops-nix/${secret_name}_xl.yaml"
yaml_output="/home/pungkula/dotfiles/secrets/${secret_name}.yaml"
secrets_dotfiles="/home/pungkula/dotfiles/secrets/${secret_name}.yaml"

# Generate a strong random password using mkpasswd
secure_password=$(mkpasswd -s $RANDOM -m sha-512)
echo -e "${CYAN}Secret to encrypt? (Press Enter to use the generated password below, or enter your own multi-line secret, ending with Ctrl+D):${RESET}"
echo -e "${YELLOW}${secure_password}${RESET}"

# Read multi-line secret input
secret_value=""
while IFS= read -r line || [[ -n "$line" ]]; do
  secret_value+="$line
"
done

echo

# If no password is entered, use the generated password
if [ -z "$secret_value" ]; then
  secret_value=$secure_password
  echo -e "${GREEN}Using the generated password.${RESET}"
else
  echo -e "${CYAN}Using your custom password.${RESET}"
fi

# Format the secret as a multi-line YAML entry
echo -e "${YELLOW}Creating YAML file: $yaml_file...${RESET}"
echo -e "${secret_name}: |" > "$yaml_file"
while IFS= read -r line || [[ -n "$line" ]]; do
  echo "  $line" >> "$yaml_file"
done <<< "$secret_value"

# Run the sops command
echo -e "${YELLOW}Encrypting the file...${RESET}"
if sops --config /var/lib/sops-nix/.sops.yaml --output-type yaml --input-type yaml --output "$yaml_output" -e "$yaml_file"; then
  echo -e "${GREEN}[SUCCESS]${RESET} Secret encrypted successfully!"
  echo -e "${GREEN}Encrypted yaml saved at: ${yaml_output}${RESET}"
  echo -e "${CYAN}Content of the encrypted file:${RESET}"
  cat "$yaml_output"

  # Remove the YAML file
  echo -e "${YELLOW}Removing the temporary YAML file...${RESET}"
  rm -f "$yaml_file"

  # Copy the yaml output to the target location in dotfiles
  echo -e "${YELLOW}Copying the encrypted yaml to /home/pungkula/dotfiles/secrets/${secret_name}.yaml...${RESET}"
  cp "$yaml_output" "$secrets_dotfiles"
  cp "$yaml_output" "/var/lib/sops-nix/secrets/${secret_name}.yaml"
  echo -e "${GREEN}[SUCCESS]${RESET} yaml file copied successfully to dotfiles secrets folder!"

  # Print the success usage message
  echo -e "${GREEN}TO USE THE SECRET:${RESET}"
  echo -e "${GREEN}
  sops.secrets = {
    ${secret_name} = {
      sopsFile = \"/var/lib/sops-nix/secrets/${secret_name}.yaml\"; 
      owner = config.users.users.secretservice.name;
      group = config.users.groups.secretservice.name;
      mode = \"0440\"; # Read-only for owner and group
    };
  };

  config.sops.secrets.${secret_name}.path;
  
  
  


  {
    config,
    inputs,
    pkgs,
    lib,
    ...
  } : let

    ${secret_name}Config = ''
      "@${secret_name}@"
    '';

    ${secret_name} =
      pkgs.runCommand "${secret_name}"
        { preferLocalBuild = true; }
        ''
          cat > $out <<EOF
  ${${secret_name}Config}
  EOF
        '';
  in {

    systemd.services.${secret_name}_config = {
      wantedBy = [ "multi-user.target" ];

      preStart = ''
        mkdir -p /run/${secret_name}
        sed -e "/@${secret_name}@/{
            r ${config.sops.secrets.${secret_name}.path}
            d
        }" ${${secret_name}} > /run/caddy/${secret_name}
      '';

      serviceConfig = {
        ExecStart = "${pkgs.bash}/bin/bash -c 'echo succes; sleep 200'";
        Restart = "on-failure";
        RestartSec = "2s";
        RuntimeDirectory = [ "${secret_name}" ];
        User = "${secret_name}";
      };
    };

    sops.secrets = {
      ${secret_name} = {
        sopsFile = ./../../secrets/${secret_name}.yaml;
        owner = "${secret_name}";
        group = "${secret_name}";
        mode = "0660";
      };
    };

    users.users.${secret_name} = {
      isSystemUser = true;
      group = "${secret_name}";
    };

    users.groups.${secret_name} = { };
  }
 

  ${RESET}"
else
  echo -e "${RED}[ERROR]${RESET} Failed to encrypt the file. Please check your configuration."
fi

