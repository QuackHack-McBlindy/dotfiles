#!/bin/bash
# [ Download Files Over Network ]
# ------------------------

# Prompt for the remote hostname or IP address
read -p "Enter the remote host (hostname or IP): " remote_host

# Prompt for the remote username
read -p "Enter the remote username: " remote_user

# Local download directory
local_download_dir="/home/pungkula/scp"

# Function to display the contents of a directory using 'ls' on the remote host
list_directory() {
    local path="$1"
    ssh "$remote_user@$remote_host" "ls -p $(echo $path)"  # Expanding path
}

# Function to remove any trailing slash from the path
remove_trailing_slash() {
    echo "$1" | sed 's:/*$::'
}

# Recursive function to handle directory navigation
navigate_directory() {
    local current_path="$1"
    
    # Remove any trailing slashes from current path
    current_path=$(remove_trailing_slash "$current_path")
    
    # Show the contents of the current directory, including a "Back" option if we're not at the root
    if [[ "$current_path" != "~" ]]; then
        list=$(echo -e "Back\n$(list_directory "$current_path")")
    else
        list=$(list_directory "$current_path")
    fi

    # Show the list in gum and capture the selection
    selected_item=$(echo "$list" | gum choose --height 20)

    # Handle "Back" option or file/directory selection
    if [[ "$selected_item" == "Back" ]]; then
        # Go up one directory level
        navigate_directory "$(dirname "$current_path")"
    else
        # If the selected item is a directory, enter it
        if [[ "$selected_item" == */ ]]; then
            choice=$(gum choose "Enter directory" "Select directory")

            if [[ "$choice" == "Enter directory" ]]; then
                navigate_directory "$current_path/$selected_item"
            else
                # Return the full path of the selected directory
                download_item "$current_path/$selected_item"
            fi
        else
            # If a file is selected, return the full path and download
            download_item "$current_path/$selected_item"
        fi
    fi
}

# Function to download the selected file or directory using SCP
download_item() {
    local remote_path="$1"

    # Ensure the remote path is correctly formatted
    remote_path=$(remove_trailing_slash "$remote_path")

    # Expand the ~ character to full path
    remote_path=$(ssh "$remote_user@$remote_host" "echo $remote_path")

    echo "Preparing to download: $remote_user@$remote_host:$remote_path"

    # Check if it's a directory or file and use SCP accordingly
    if ssh "$remote_user@$remote_host" "[ -d \"$remote_path\" ]"; then
        # It's a directory, use -r for recursive download
        echo "Downloading directory: $remote_user@$remote_host:$remote_path"
        scp -r "$remote_user@$remote_host:$remote_path" "$local_download_dir"
        
        # Check if scp succeeded
        if [[ $? -eq 0 ]]; then
            echo "Directory download complete: $remote_user@$remote_host:$remote_path"
        else
            echo "Error: Failed to download directory $remote_path"
        fi
    elif ssh "$remote_user@$remote_host" "[ -f \"$remote_path\" ]"; then
        # It's a file, just download the file
        echo "Downloading file: $remote_user@$remote_host:$remote_path"
        scp "$remote_user@$remote_host:$remote_path" "$local_download_dir"
        
        # Check if scp succeeded
        if [[ $? -eq 0 ]]; then
            echo "File download complete: $remote_user@$remote_host:$remote_path"
        else
            echo "Error: Failed to download file $remote_path"
        fi
    else
        # If it's neither a file nor a directory, print an error
        echo "Error: $remote_user@$remote_host:$remote_path is neither a file nor a directory."
    fi
}

# Start navigation from the home directory
navigate_directory "~"


