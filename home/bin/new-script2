#!/bin/bash

# Check if the script is run as root
if [ "$EUID" -ne 0 ]; then
  echo -e "\033[1;31m[ERROR]\033[0m YO SUDO PLZ!"
  exit 1
fi

# Ensure gum is installed
if ! command -v gum &>/dev/null; then
  echo "Gum is not installed. Please install it first: https://github.com/charmbracelet/gum"
  exit 1
fi

# Prompt for script type
script_type=$(gum choose "bash" "python" "other")

# Prompt for script name
script_name=$(gum input --placeholder "Enter script name (without extension)")

# Use nano to edit the script content
gum style --bold "Enter your script content below:"
script_path=$(mktemp)

# Open nano for the user to input their script content
nano "$script_path"

# Check if the user actually entered anything
if [ ! -s "$script_path" ]; then
  echo "No script content provided. Exiting..."
  rm "$script_path"
  exit 1
fi

# Create the flake.nix file
flake_file="flake.nix"

# Create the `flake.nix` with user-provided values
cat > "$flake_file" <<EOF
{
  description = "Script generated with user input";

  # Nixpkgs / NixOS version to use.
  inputs.nixpkgs.url = "nixpkgs/nixos-21.05";

  outputs = { self, nixpkgs }:
    let
      # to work with older version of flakes
      lastModifiedDate = self.lastModifiedDate or self.lastModified or "19700101";

      # Generate a user-friendly version number.
      version = builtins.substring 0 8 lastModifiedDate;

      # System types to support.
      supportedSystems = [ "x86_64-linux" "x86_64-darwin" "aarch64-linux" "aarch64-darwin" ];

      # Helper function to generate an attrset '{ x86_64-linux = f "x86_64-linux"; ... }'.
      forAllSystems = nixpkgs.lib.genAttrs supportedSystems;

      # Nixpkgs instantiated for supported system types.
      nixpkgsFor = forAllSystems (system: import nixpkgs { inherit system; overlays = [ self.overlay ]; });

    in

    {
      overlay = final: prev: {

        # Insert the user's script name and content into the Nix derivation
        $script_name = with final; stdenv.mkDerivation rec {
          name = "$script_name-${version}";

          unpackPhase = ":";

          buildPhase =
            ''
              cat > $script_name <<EOF
              #! $SHELL
              $(cat "$script_path")
              EOF
              chmod +x $script_name
            '';

          installPhase =
            ''
              mkdir -p $out/bin
              cp $script_name $out/bin/
            '';
        };

      };

      packages = forAllSystems (system:
        {
          inherit (nixpkgsFor.${system}) $script_name;
        });

      defaultPackage = forAllSystems (system: self.packages.${system}.$script_name);

      nixosModules.$script_name =
        { pkgs, ... }:
        {
          nixpkgs.overlays = [ self.overlay ];
          environment.systemPackages = [ pkgs.$script_name ];
        };

      checks = forAllSystems
        (system:
          with nixpkgsFor.${system};

          {
            inherit (self.packages.${system}) $script_name;
            test = stdenv.mkDerivation {
              name = "$script_name-test-${version}";
              buildInputs = [ $script_name ];
              unpackPhase = "true";
              buildPhase = ''
                echo 'running some integration tests'
                [[ \$(hello) = 'Hello Nixers!' ]]
              '';
              installPhase = "mkdir -p \$out";
            };
          }
        );
    };
}
EOF

# Run `nix build` to build the package using the newly created flake.nix
nix build

# Remove the `flake.nix` and temporary script file after building
rm "$flake_file"
rm "$script_path"

# Inform the user that the process is complete
gum style --foreground 212 "Script $script_name created, built with nix, and the flake.nix was removed."

