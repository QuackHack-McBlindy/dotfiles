#include <PubSubClient.h>
#include "driver/temp_sensor.h"
#include <ArduinoJson.h>
#include <Update.h>
#include <Wire.h>
#include <WiFi.h>
#include <HTTPClient.h>
#include <WebServer.h>
#include <driver/i2s.h>
#include <PubSubClient.h>  // Add at the top


// Pin Definitions
#define I2C_SDA         8
#define I2C_SCL         18
#define TS_IRQ          3
#define TFT_BL          45
#define I2S_SDIN        16
#define I2S_LRCK        47
#define I2S_SCLK        17
#define I2S_MCLK        2
#define PA_PIN          46
#define MUTE_PIN        1
#define TFT_RST         48
#define BATTERY_ADC_PIN 10
#define TOUCH_RESET_PIN TFT_RST 
#define TOUCH_INT_PIN   TS_IRQ

// I2C Configuration
#define ES7210_ADDR     0x40  // MIC ADC
#define TT21100_ADDR    0x24  // Touch Panel

// Audio settings
#define SAMPLE_RATE     16000  // 16KHz
#define SAMPLE_BITS     16
#define BUFFER_SIZE     1024

// WiFi & API
const char* ssid = "pungkula2";
const char* password = "X";
const char* apiEndpoint = "https://192.168.1.111:25451/audio_upload";
// MQTT Configuration
const char* mqtt_server = "192.168.1.111"; // MQTT broker IP
const char* mqtt_user = "mqtt";
const char* mqtt_password = "XX";
WiFiClient espClient;
PubSubClient mqttClient(espClient);

// Battery settings
#define BATTERY_MIN_VOLTAGE 3.3
#define BATTERY_MAX_VOLTAGE 4.2

// Global variables
volatile bool touchDetected = false;
bool isRecording = false;
bool wasTouched = false;
unsigned long lastTouchTime = 0;
String lastError = "None";
WiFiClient client;
HTTPClient http;
WebServer server(80);
String zigbeeDevicesHTML = R"rawliteral(<div class="switch-label">
  <div class="control-label">
    <span>💡</span> Vägg
    (hallway)
  </div>
  <label class="toggle">
    <input type="checkbox" onchange="toggleDevice('0x000b57fffe0e2a04', this.checked)">
    <span class="slider"></span>
  </label>
</div>
<div class="switch-label">
  <div class="control-label">
    <span>💡</span> Bloom
    (bedroom)
  </div>
  <label class="toggle">
    <input type="checkbox" onchange="toggleDevice('0x00178801001ecdaa', this.checked)">
    <span class="slider"></span>
  </label>
</div>
<div class="switch-label">
  <div class="control-label">
    <span>💡</span> Rustning
    (livingroom)
  </div>
  <label class="toggle">
    <input type="checkbox" onchange="toggleDevice('0x0017880102de8570', this.checked)">
    <span class="slider"></span>
  </label>
</div>
<div class="switch-label">
  <div class="control-label">
    <span>💡</span> Spotlight kök 1
    (kitchen)
  </div>
  <label class="toggle">
    <input type="checkbox" onchange="toggleDevice('0x0017880102f0848a', this.checked)">
    <span class="slider"></span>
  </label>
</div>
<div class="switch-label">
  <div class="control-label">
    <span>💡</span> Spotlight Kök 2
    (kitchen)
  </div>
  <label class="toggle">
    <input type="checkbox" onchange="toggleDevice('0x0017880102f08526', this.checked)">
    <span class="slider"></span>
  </label>
</div>
<div class="switch-label">
  <div class="control-label">
    <span>💡</span> WC 2
    (wc)
  </div>
  <label class="toggle">
    <input type="checkbox" onchange="toggleDevice('0x0017880103406f41', this.checked)">
    <span class="slider"></span>
  </label>
</div>
<div class="switch-label">
  <div class="control-label">
    <span>💡</span> WC 1
    (wc)
  </div>
  <label class="toggle">
    <input type="checkbox" onchange="toggleDevice('0x001788010361b842', this.checked)">
    <span class="slider"></span>
  </label>
</div>
<div class="switch-label">
  <div class="control-label">
    <span>💡</span> Takkrona 1
    (livingroom)
  </div>
  <label class="toggle">
    <input type="checkbox" onchange="toggleDevice('0x00178801037e754e', this.checked)">
    <span class="slider"></span>
  </label>
</div>
<div class="switch-label">
  <div class="control-label">
    <span>💡</span> Uppe
    (kitchen)
  </div>
  <label class="toggle">
    <input type="checkbox" onchange="toggleDevice('0x0017880103a0d280', this.checked)">
    <span class="slider"></span>
  </label>
</div>
<div class="switch-label">
  <div class="control-label">
    <span>💡</span> Takkrona 2
    (livingroom)
  </div>
  <label class="toggle">
    <input type="checkbox" onchange="toggleDevice('0x0017880103c73f85', this.checked)">
    <span class="slider"></span>
  </label>
</div>
<div class="switch-label">
  <div class="control-label">
    <span>💡</span> Taket Sovrum 2
    (bedroom)
  </div>
  <label class="toggle">
    <input type="checkbox" onchange="toggleDevice('0x0017880103c7467d', this.checked)">
    <span class="slider"></span>
  </label>
</div>
<div class="switch-label">
  <div class="control-label">
    <span>💡</span> Takkrona 4
    (livingroom)
  </div>
  <label class="toggle">
    <input type="checkbox" onchange="toggleDevice('0x0017880103c753b8', this.checked)">
    <span class="slider"></span>
  </label>
</div>
<div class="switch-label">
  <div class="control-label">
    <span>💡</span> Golvet
    (kitchen)
  </div>
  <label class="toggle">
    <input type="checkbox" onchange="toggleDevice('0x0017880103e0add1', this.checked)">
    <span class="slider"></span>
  </label>
</div>
<div class="switch-label">
  <div class="control-label">
    <span>💡</span> Tak Hall
    (hallway)
  </div>
  <label class="toggle">
    <input type="checkbox" onchange="toggleDevice('0x0017880103eafdd6', this.checked)">
    <span class="slider"></span>
  </label>
</div>
<div class="switch-label">
  <div class="control-label">
    <span>💡</span> Dörr
    (bedroom)
  </div>
  <label class="toggle">
    <input type="checkbox" onchange="toggleDevice('0x0017880103f44b5f', this.checked)">
    <span class="slider"></span>
  </label>
</div>
<div class="switch-label">
  <div class="control-label">
    <span>💡</span> Takkrona 3
    (livingroom)
  </div>
  <label class="toggle">
    <input type="checkbox" onchange="toggleDevice('0x0017880103f94041', this.checked)">
    <span class="slider"></span>
  </label>
</div>
<div class="switch-label">
  <div class="control-label">
    <span>💡</span> Sänggavel
    (bedroom)
  </div>
  <label class="toggle">
    <input type="checkbox" onchange="toggleDevice('0x0017880104051a86', this.checked)">
    <span class="slider"></span>
  </label>
</div>
<div class="switch-label">
  <div class="control-label">
    <span>💡</span> PC
    (livingroom)
  </div>
  <label class="toggle">
    <input type="checkbox" onchange="toggleDevice('0x0017880104540411', this.checked)">
    <span class="slider"></span>
  </label>
</div>
<div class="switch-label">
  <div class="control-label">
    <span>💡</span> Taket Sovrum 1
    (bedroom)
  </div>
  <label class="toggle">
    <input type="checkbox" onchange="toggleDevice('0x0017880106156cb0', this.checked)">
    <span class="slider"></span>
  </label>
</div>
<div class="switch-label">
  <div class="control-label">
    <span>💡</span> Sänglampa
    (bedroom)
  </div>
  <label class="toggle">
    <input type="checkbox" onchange="toggleDevice('0x0017880109ac14f3', this.checked)">
    <span class="slider"></span>
  </label>
</div>
<div class="switch-label">
  <div class="control-label">
    <span>💡</span> Kök Bänk Slinga
    (kitchen)
  </div>
  <label class="toggle">
    <input type="checkbox" onchange="toggleDevice('0xa4c13873044cb7ea', this.checked)">
    <span class="slider"></span>
  </label>
</div>
)rawliteral";
unsigned long lastZigbeeFetch = 0;
const unsigned long ZIGBEE_UPDATE_INTERVAL = 300000; // 5 minutes
const char* zigbeeEndpoint = "http://192.168.1.111:25451/zigbee_devices";

// Touch state tracking
bool touchActive = false;
unsigned long lastTouchCheck = 0;
const unsigned long TOUCH_CHECK_INTERVAL = 50; // ms

// ===================== TOUCH FUNCTIONS =====================

//void updateTouchState() {
//  if (millis() - lastTouchCheck < TOUCH_CHECK_INTERVAL) return;
//  lastTouchCheck = millis();
  
//  bool currentTouch = checkTouch();
  
//  if (currentTouch && !touchActive) {
    // Touch started
//    touchActive = true;
//    if (!isRecording) {
//      startRecording();
//    }
//  } else if (!currentTouch && touchActive) {
//    // Touch ended
//    touchActive = false;
//    if (isRecording) {
///      stopRecording();
//    }
//  }
//}

// ===================== RECORDING CONTROL =====================
void startRecording() {
  if (isRecording) return;
  
  Serial.println("Recording started (touch detected)");
  digitalWrite(TFT_BL, HIGH);  // Turn on screen
  isRecording = true;
  i2s_start(I2S_NUM_0);
  
  // Begin HTTP connection
  http.begin(client, apiEndpoint);
  http.addHeader("Content-Type", "application/octet-stream");
}

void stopRecording() {
  if (!isRecording) return;
  
  Serial.println("Recording stopped (touch released)");
  isRecording = false;
  i2s_stop(I2S_NUM_0);
  http.end();
}

// ===================== AUDIO STREAMING =====================
void streamAudio() {
  if (!isRecording) return;
  
  static uint8_t audioBuffer[BUFFER_SIZE * 2];
  size_t bytesRead = 0;
  
  // Read audio (non-blocking)
  i2s_read(I2S_NUM_0, audioBuffer, sizeof(audioBuffer), &bytesRead, 0);

  if (bytesRead > 0) {
    // Send chunk via HTTP
    int httpCode = http.POST(audioBuffer, bytesRead);
    
    if (httpCode != HTTP_CODE_OK) {
      lastError = "HTTP Error: " + String(httpCode);
      stopRecording();
    }
  }
}

// ===================== BATTERY FUNCTIONS =====================
float getBatteryVoltage() {
  int raw = analogRead(BATTERY_ADC_PIN);
  float voltage = (raw / 4095.0) * 3.3 * 2.0; // 12-bit ADC, 3.3V ref, 2:1 divider
  return voltage;
}

int getBatteryPercentage() {
  float voltage = getBatteryVoltage();
  int percentage = (voltage - BATTERY_MIN_VOLTAGE) / (BATTERY_MAX_VOLTAGE - BATTERY_MIN_VOLTAGE) * 100;
  percentage = constrain(percentage, 0, 100);
  return percentage;
}

// ===================== ZIGBEE FUNCTIONS =====================
void fetchZigbeeDevices() {
  HTTPClient http;
  http.begin(zigbeeEndpoint);
  int httpCode = http.GET();
  
  if (httpCode == HTTP_CODE_OK) {
      String payload = http.getString();
      DynamicJsonDocument doc(4096);
      deserializeJson(doc, payload);
      JsonObject devices = doc.as<JsonObject>();
      
      zigbeeDevicesHTML = "";
      for (JsonPair kv : devices) {
          const char* id = kv.key().c_str();
          JsonObject device = kv.value().as<JsonObject>();
          const char* type = device["type"];
          const char* name = device["friendly_name"];
          const char* room = device["room"];
          bool state = device["state"]; // Get current state

          if (strcmp(type, "light") == 0) {
              zigbeeDevicesHTML += "<div class=\"switch-label\">";
              zigbeeDevicesHTML += "<div class=\"control-label\"><span>💡</span> ";
              zigbeeDevicesHTML += name;
              zigbeeDevicesHTML += " (";
              zigbeeDevicesHTML += room;
              zigbeeDevicesHTML += ")</div>";
              zigbeeDevicesHTML += "<label class=\"toggle\">";
              zigbeeDevicesHTML += "<input type=\"checkbox\" onchange=\"toggleZigbee('";
              zigbeeDevicesHTML += id;
              zigbeeDevicesHTML += "', this.checked)\" ";
              zigbeeDevicesHTML += (state ? "checked" : "");
              zigbeeDevicesHTML += ">";
              zigbeeDevicesHTML += "<span class=\"slider\"></span>";
              zigbeeDevicesHTML += "</label>";
              zigbeeDevicesHTML += "</div>";
          }
      }
  } else {
      Serial.println("Failed to fetch Zigbee devices");
  }
  http.end();
}
// ===================== ES7210 INITIALIZATION =====================
void es7210_init() {
  Wire.beginTransmission(ES7210_ADDR);
  Wire.write(0x00); Wire.write(0x41);  // Power up, MCLK=BCK
  Wire.write(0x01); Wire.write(0x22);  // OSR=64
  Wire.write(0x02); Wire.write(0x50);  // Clock divider
  Wire.write(0x07); Wire.write(0x01);  // Enable ONLY ADC1 (mono)
  Wire.write(0x08); Wire.write(0x00);  // Disable other ADCs
  Wire.write(0x20); Wire.write(0x0A);  // LRCK divider
  Wire.write(0x21); Wire.write(0x0A);  // MCLK divider
  Wire.endTransmission();
  delay(50);
}

// ===================== I2S INITIALIZATION =====================
void initI2S() {
  i2s_config_t i2s_config = {
    .mode = (i2s_mode_t)(I2S_MODE_MASTER | I2S_MODE_RX),
    .sample_rate = SAMPLE_RATE,
    .bits_per_sample = I2S_BITS_PER_SAMPLE_16BIT,
    .channel_format = I2S_CHANNEL_FMT_ONLY_LEFT,
    .communication_format = I2S_COMM_FORMAT_STAND_I2S,
    .intr_alloc_flags = ESP_INTR_FLAG_LEVEL1,
    .dma_buf_count = 4,
    .dma_buf_len = BUFFER_SIZE,
    .use_apll = false,
    .tx_desc_auto_clear = false,
    .fixed_mclk = 0
  };

  i2s_pin_config_t pin_config = {
    .mck_io_num = I2S_MCLK,
    .bck_io_num = I2S_SCLK,
    .ws_io_num = I2S_LRCK,
    .data_out_num = I2S_PIN_NO_CHANGE,
    .data_in_num = I2S_SDIN
  };

  i2s_driver_install(I2S_NUM_0, &i2s_config, 0, NULL);
  i2s_set_pin(I2S_NUM_0, &pin_config);
}

// ===================== WEB SERVER HANDLERS =====================
void handleRoot() {
  float batteryVoltage = getBatteryVoltage();
  int batteryPercent = 0;

  if (batteryVoltage >= 4.4) {
    batteryPercent = 100;
  } else if (batteryVoltage > 1.2) {
    batteryPercent = static_cast<int>((batteryVoltage - 1.2) * (100.0 / 3.2));
  }

  String motionStatus = "No motion";
  String temperature = "23.5 °C";
  String rfCode = "None received";
  String uptime = String(millis() / 1000) + " sec";

  String html;

  // Start of HTML (raw string)
  html += R"rawliteral(<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>🦆'Dash</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://qwackify.duckdns.org/duckdash.css">
  <script>
    function toggleZigbee(id, checked) {
      const el = document.getElementById(`zigbee-${id}-status`);
      el.textContent = checked ? "On" : "Off";
      fetch(`/zigbee/control?id=${encodeURIComponent(id)}&state=${checked ? 'on' : 'off'}`)
        .then(res => {
          if (!res.ok) alert(`Toggle ${id} failed`);
        });
    }
    function toggleZigbee(id, checked) {
      const el = document.getElementById(`zigbee-${id}-status`);
      el.textContent = checked ? "On" : "Off";
      fetch(`/zigbee/control?id=${encodeURIComponent(id)}&state=${checked ? 'on' : 'off'}`)
        .then(res => {
          if (!res.ok) alert(`Toggle ${id} failed`);
        });
    }
    function toggleRecording(checkbox) {
      const state = checkbox.checked;
      document.getElementById("recording-status").textContent = state ? "Recording" : "Stopped";
      toggleFeature("record", state);
    }
    function toggleFeature(feature, state) {
      fetch(`/${feature}?state=${state ? 'on' : 'off'}`)
        .then(res => {
          if (!res.ok) alert("Toggle failed");
        });
    }
  </script>
</head>
<body>
  <div class="container">
    <header>
      <h1>🦆Dash for device boxy</h1>
    </header>

    <div class="battery-section">
      <div class="status-icon">🔋</div>
      <div class="battery-percent">)rawliteral";

  html += String(batteryPercent);
  html += R"rawliteral(%</div>
      <div class="battery-bar">
        <div class="battery-fill )rawliteral";

  html += (batteryPercent > 50 ? "battery-high" : batteryPercent > 20 ? "battery-medium" : "battery-low");
  html += R"rawliteral(" style="width:)rawliteral";
  html += String(batteryPercent);
  html += R"rawliteral(%"></div>
      </div>
      <div class="voltage">Voltage: )rawliteral";
  html += String(batteryVoltage, 2);
  html += R"rawliteral(V</div>
    </div>

    <div class="status-grid">

      <div class="status-item"><div class="status-icon">🌐</div><div class="status-content"><div class="status-label">WiFi Status</div><div class="status-value">)rawliteral";
  html += (WiFi.status() == WL_CONNECTED ? WiFi.localIP().toString() : "Disconnected");
  html += R"rawliteral(</div></div></div>

      <div class="status-item"><div class="status-icon">❗</div><div class="status-content"><div class="status-label">System Error</div><div class="status-value">)rawliteral";
  html += lastError;
  html += R"rawliteral(</div></div></div>

      <div class="status-item"><div class="status-icon">🔋</div><div class="status-content"><div class="status-label">Battery Voltage</div><div class="status-value">)rawliteral";
  html += String(batteryVoltage, 2);
  html += R"rawliteral(V</div></div></div>

      <div class="status-item"><div class="status-icon">🕵️</div><div class="status-content"><div class="status-label">Motion Sensor</div><div class="status-value">)rawliteral";
  html += motionStatus;
  html += R"rawliteral(</div></div></div>

      <div class="status-item"><div class="status-icon">🌡️</div><div class="status-content"><div class="status-label">Temperature</div><div class="status-value">)rawliteral";
  html += temperature;
  html += R"rawliteral(</div></div></div>

      <div class="status-item"><div class="status-icon">🎙️</div><div class="status-content"><div class="status-label">Recording</div>
        <div class="status-value" style="display: flex; justify-content: space-between; align-items: center;">
          <span id="recording-status">)rawliteral";
  html += (isRecording ? "Recording" : "Stopped");
  html += R"rawliteral(</span>
          <label class="toggle" style="margin: 0;">
            <input type="checkbox" id="record-toggle" onchange="toggleRecording(this)" )rawliteral";
  html += (isRecording ? "checked" : "");
  html += R"rawliteral(>
            <span class="slider"></span>
          </label>
        </div>
      </div></div>

      <div class="status-item"><div class="status-icon">💡</div><div class="status-content"><div class="status-label">Backlight</div><div class="status-value">)rawliteral";
  html += (digitalRead(TFT_BL) == HIGH ? "On" : "Off");
  html += R"rawliteral(</div></div></div>

      <div class="status-item"><div class="status-icon">📢</div><div class="status-content"><div class="status-label">Amplifier</div><div class="status-value">)rawliteral";
  html += (digitalRead(PA_PIN) == HIGH ? "On" : "Off");
  html += R"rawliteral(</div></div></div>

      <div class="status-item"><div class="status-icon">⏱️</div><div class="status-content"><div class="status-label">Uptime</div><div class="status-value">)rawliteral";
  html += uptime;
  html += R"rawliteral(</div></div></div>

      <div class="status-item"><div class="status-icon">🔇</div><div class="status-content"><div class="status-label">Button Mute</div><div class="status-value">)rawliteral";
  html += (digitalRead(MUTE_PIN) == LOW ? "PRESSED" : "RELEASED");
  html += R"rawliteral(</div></div></div>

      <div class="status-item"><div class="status-icon">📡</div><div class="status-content"><div class="status-label">RF Receiver</div><div class="status-value">)rawliteral";
  html += rfCode;
  html += R"rawliteral(</div></div></div>

    </div>

    <div class="controls">
      <h2 style="margin-bottom: 20px; text-align: center; color: #2b6cb0;">Device Controls</h2>

      <h3 style="margin-top: 20px; text-align: center; color: #2b6cb0;">Zigbee Lights</h3>
)rawliteral";

  html += zigbeeDevicesHTML;

  html += R"rawliteral(
    </div>
    <div class="footer">
      <p>DuckBox 9000 | Firmware v1.2 | ESP32S3BOX</p>
    </div>
  </div>
</body>
</html>
)rawliteral";

  server.send(200, "text/html", html);
}


void handleRecord() {
  if (server.arg("state") == "on") {
    startRecording();
  } else if (server.arg("state") == "off") {
    stopRecording();
  }
  server.sendHeader("Location", "/");
  server.send(302, "text/plain", "Redirecting...");
}

void handleZigbeeControl() {
  String id = server.arg("id");
  String state = server.arg("state");
  
  // Construct MQTT topic and payload
  String topic = "zigbee2mqtt/" + id + "/set";
  String payload = "{\"state\":\"" + (state == "on" ? "ON" : "OFF") + "\"}";
  
  if (mqttClient.publish(topic.c_str(), payload.c_str())) {
    Serial.printf("MQTT command sent: %s = %s\n", topic.c_str(), payload.c_str());
    server.send(200, "text/plain", "OK");
  } else {
    server.send(500, "text/plain", "MQTT Publish Failed");
  }
}


// ===================== TOUCH FUNCTIONS =====================
void tt21100_init() {
  // Reset touch controller
  pinMode(TOUCH_RESET_PIN, OUTPUT);
  digitalWrite(TOUCH_RESET_PIN, LOW);
  delay(10);
  digitalWrite(TOUCH_RESET_PIN, HIGH);
  delay(50);
  
  // Verify device presence
  Wire.beginTransmission(TT21100_ADDR);
  if (Wire.endTransmission() != 0) {
    Serial.println("TT21100 not found!");
    lastError = "Touch init failed";
    return;
  }
  
  // Configure touch controller
  uint8_t config[] = {
    0x00, 0x10,  // Enable touch reporting
    0x07, 0x01,  // Set sensitivity
    0x08, 0x0F   // Enable all channels
  };
  
  for (int i = 0; i < sizeof(config); i += 2) {
    Wire.beginTransmission(TT21100_ADDR);
    Wire.write(config[i]);     // Register address
    Wire.write(config[i+1]);   // Value
    Wire.endTransmission();
  }
  Serial.println("TT21100 initialized");
}

bool checkTouch() {
  Wire.beginTransmission(TT21100_ADDR);
  Wire.write(0x00);  // Status register
  if (Wire.endTransmission(false) != 0) return false;
  
  uint8_t bytesReceived = Wire.requestFrom(TT21100_ADDR, 1);
  if (bytesReceived == 1) {
    return (Wire.read() & 0x80) != 0;
  }
  return false;
}

 
  if ((millis() - debounceTime) > debounceDelay) {
    if (currentState && !touchActive) {
      touchActive = true;
      startRecording();
    } 
    else if (!currentState && touchActive) {
      touchActive = false;
      stopRecording();
    }
  }
  lastState = currentState;
}

void reconnectMQTT() {
  while (!mqttClient.connected()) {
    Serial.print("Attempting MQTT connection...");
    if (mqttClient.connect("ESP32Client", mqtt_user, mqtt_password)) {
      Serial.println("connected");
    } else {
      Serial.print("failed, rc=");
      Serial.print(mqttClient.state());
      Serial.println(" try again in 5 seconds");
      delay(5000);
    }
  }
}
// ===================== SETUP & MAIN LOOP =====================
void setup() {
  // Initialize touch controller
  tt21100_init();
  pinMode(TOUCH_INT_PIN, INPUT_PULLUP);
  Serial.begin(115200);
  delay(1000);
  // Initialize MQTT
  mqttClient.setServer(mqtt_server, 1883);
    
  // Initialize pins
  pinMode(PA_PIN, OUTPUT);
  pinMode(MUTE_PIN, INPUT_PULLUP);
  pinMode(TFT_BL, OUTPUT);
  pinMode(TFT_RST, OUTPUT);
  pinMode(BATTERY_ADC_PIN, INPUT);
  
  // Initialize I2C
  Wire.begin(I2C_SDA, I2C_SCL);
  
  // Initialize ES7210 microphone
  es7210_init();
  
  // Initialize I2S
  initI2S();
  
  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nConnected! IP: " + WiFi.localIP().toString());
 
  // Setup HTTP server
  server.on("/", handleRoot);
  server.on("/record", handleRecord);
  server.on("/zigbee/control", handleZigbeeControl);
  server.begin();
  
  // Initial Zigbee device fetch
  fetchZigbeeDevices();
  
  // Turn on amplifier by default
  digitalWrite(PA_PIN, HIGH);
}

void loop() {
  server.handleClient();
 

  streamAudio();
  server.handleClient();

  streamAudio();
  if (!mqttClient.connected()) {
    reconnectMQTT();
  }
  mqttClient.loop();

  if (millis() - lastZigbeeFetch > ZIGBEE_UPDATE_INTERVAL) {
    fetchZigbeeDevices();
    lastZigbeeFetch = millis();
  }
  
  delay(10);
}
