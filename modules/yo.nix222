{ 
  config,
  lib,
  pkgs,
  ...
} : with lib;
let
  scriptType = types.submodule ({ name, ... }: {
    options = {
      description = mkOption {
        type = types.str;
        description = "Description of the script";
      };
      code = mkOption {
        type = types.either types.lines (types.functionTo types.lines);
        description = "Script code or function generating code";
      };
      aliases = mkOption {
        type = types.listOf types.str;
        default = [];
        description = "Alternative command names";
      };
      dynamic = mkOption {
        type = types.bool;
        default = false;
        description = "Whether to evaluate code at build time";
      };
    };
  });

  cfg = config.yo;
  
  # Enhanced package builder with dynamic code evaluation
  buildScript = name: script:
    let
      resolvedCode = if script.dynamic then
        if builtins.isFunction script.code then
          script.code { inherit config pkgs lib; }
        else
          script.code
      else
        script.code;
    in
      pkgs.writeShellScriptBin "yo-${name}" resolvedCode;

  yoScriptsPackage = pkgs.symlinkJoin {
    name = "yo-scripts";
    paths = lib.mapAttrsToList (name: script:
      let
        mainScript = buildScript name script;
      in
        pkgs.runCommand "yo-script-${name}" {} ''
          mkdir -p $out/bin
          ln -s ${mainScript}/bin/yo-${name} $out/bin/yo-${name}
          ${concatMapStrings (alias: ''
            ln -s ${mainScript}/bin/yo-${name} $out/bin/yo-${alias}
          '') script.aliases}
        ''
    ) cfg.scripts;
  };

  # Dynamic help text generation
  helpText = let
    rows = map (script:
      let
        aliasList = lib.optionalString (script.aliases != []) 
          "(${concatStringsSep "|" script.aliases})";
      in "| ${script.name} ${aliasList} | ${script.description} |"
    ) (attrValues cfg.scripts);
  in
    concatStringsSep "\n" rows;

in {
  options.yo.scripts = mkOption {
    type = types.attrsOf scriptType;
    default = {};
    description = "Script definitions with dynamic capabilities";
  };

  config = {
    environment.systemPackages = [
      (pkgs.writeShellScriptBin "yo" ''
        #!${pkgs.runtimeShell}
        script_dir="${yoScriptsPackage}/bin"
        FLAKE_DIR="${config.this.user.me.dotfilesDir}"

        show_help() {
          ${pkgs.glow}/bin/glow <<EOF
        # ❄️ Yo! Flake Manager
        
        ## Available Commands
        ${helpText}
        
        **Dynamic Features:**
        - Host-aware execution
        - Live flake introspection
        - Secret management integration
        EOF
        }

        _yo_complete() {
          COMPREPLY=($(compgen -W "$(
            ${pkgs.findutils}/bin/find "$script_dir" -name 'yo-*' \
            -exec basename {} \; | cut -d- -f2- | tr '\n' ' '
          )" -- "$2"))
        }

        complete -F _yo_complete yo

        if [[ "$1" =~ ^(-h|--help)$ ]]; then
          show_help
          exit 0
        fi

        cmd="$1"
        shift
        
        exec_script() {
          local script_path="$script_dir/yo-$cmd"
          if [[ -x "$script_path" ]]; then
            FLAKE_DIR="$FLAKE_DIR" "$script_path" "$@"
          else
            echo "Unknown command: $cmd" >&2
            show_help >&2
            exit 1
          fi
        }

        # Special case for dynamic host commands
        if [[ -z "$cmd" ]]; then
          show_help
          exit 1
        elif [[ "$cmd" == @(deploy|build|iso) ]]; then
          if [[ -z "$1" ]]; then
            hosts=$(${pkgs.nix}/bin/nix eval --json .#nixosConfigurations \
              --apply 'builtins.attrNames' | ${pkgs.jq}/bin/jq -r '.[]')
            echo "Available hosts:"
            echo "$hosts" | ${pkgs.column}/bin/column
            exit 0
          fi
          exec_script "$@"
        else
          exec_script "$@"
        fi
      '')
      yoScriptsPackage
    ];
  };
}
