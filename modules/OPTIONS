#        encoding = {  
#          encodingThreadCount = mkOption {
#            type = types.int;
#            default = -1;
#            description = mdDocs ''
#              The thread count used for encoding.\
#              -1 is auto\
#              0 is max
#            '';
#          };
        
#          transcodingTempPath = mkOption {
#            type = types.str;
#            default = "${jellyConfig.dataDir}/transcodes";
#            description = mdDocs ''
#              The temporary transcoding path.
#            '';
#          };
        
#          fallbackFontPath = mkOption {
#            type = with types; nullOr str;
#            default = null;
#            description = mdDocs ''
#              The path to the fallback font.
#            '';
#          };
        
#          enableFallbackFont = mkOption {
#            type = types.bool;
#            default = false;
#            description = mdDocs ''
#              Value indicating whether to use the fallback font.
#            '';
#          };
        
          # TODO: add to encoding.nix
#          enableAudioVbr = mkOption {
#            type = types.bool;
#            default = false;
#            description = mdDocs ''
#              Value indicating whether audio VBR is enabled.
#            '';
#          };
        
#          downMixAudioBoost = mkOption {
#            type = types.number;
#            default = 2;
#            description = mdDocs ''
#              The audio boost applied when downmixing audio.
#            '';
#          };
        
#          downMixStereoAlgorithm = mkOption {
#            type = types.enum ["none" "dave750" "nightmodedialogue"];
#            default = "none";
#            description = mdDocs ''
#              The algorithm used for downmixing audio to stereo.
#            '';
#          };
        
#          maxMuxingQueueSize = mkOption {
#            type = types.int;
#            default = 2048;
#            description = mdDocs ''
#              The maximum size of the muxing queue.
#            '';
#          };        
#          enableThrottling = mkOption {
#            type = types.bool;
#            default = false;
#            description = mdDocs ''
#              Value indicating whether throttling is enabled.
#            '';
#          };       
#          throttleDelaySeconds = mkOption {
#            type = types.int;
#            default = 180;
#            description = mdDocs ''
#              The delay after which throttling happens.
#            '';
#          };
#          enableSegmentDeletion = mkOption {
#            type = types.bool;
#            default = false;
#            description = mdDocs ''
#              Value indicating whether segment deletion is enabled.
#            '';
#          };
#          segmentKeepSeconds = mkOption {
#            type = types.int;
#            default = 720;
#            description = mdDocs ''
#              Seconds for which segments should be kept before being deleted.
#            '';
#          };      
#          hardwareAccelerationType = mkOption {
#            type = types.enum ["amf" "qsv" "nvenc" "v4l2m2m" "vaapi" "videotoolbox" "rkmpp"];
#            default = "vaapi";
#            description = mdDocs ''
#              The hardware acceleration type.
#            '';
#          };
        
          # TODO: add to encoding.nix
#          encoderAppPath = mkOption {
#            type = types.str;
#            default = "${ffmpeg}/bin/ffmpeg";
#            description = mdDocs ''
#              The current FFmpeg path being used by the system.
#            '';
#          };
        
  #        encoderAppPathDisplay = mkOption {
#            type = types.str;
#            default = cfg.encoderAppPath;
#            readOnly = true;
#            description = mdDocs ''
#              The current FFmpeg path displayed on the transcode page.
#            '';
#          };    
#          vaapiDevice = mkOption {
#            type = types.str;
#            default = "/dev/dri/renderD128";
#            description = mdDocs ''
#              The default is a DRM device that is almost guaranteed to be there on every intel platform,
#              plus it's the default one in ffmpeg if you don't specify anything
#            '';
#          };
        
#          enableTonemapping = mkOption {
#            type = types.bool;
#            default = false;
#            description = mdDocs ''
#              Value indicating whether tonemapping is enabled.
#            '';
#          };
        
#          enableVppTonemapping = mkOption {
#            type = types.bool;
#            default = false;
#            description = mdDocs ''
#              Value indicating whether VPP tonemapping is enabled.
#            '';
#          };
        
          tonemappingAlgorithm = mkOption {
            type = types.enum ["none" "clip" "linear" "gamma" "reinhard" "hable" "mobius" "bt2390"];
            default = "bt2390";
            description = mdDocs ''
              The tone-mapping algorithm.
            '';
          };
        
          tonemappingMode = mkOption {
            type = types.enum ["auto" "max" "rgb"];
            default = "auto";
            description = mdDocs ''
              The tone-mapping mode.
            '';
          };
        
#          tonemappingRange = mkOption {
#            type = types.enum ["auto" "tv" "pc"];
#            default = "auto";
#            description = mdDocs ''
#              The tone-mapping range.
#            '';
#          };
        
#          tonemappingDesat = mkOption {
#            type = types.number;
#            default = 0;
#            description = mdDocs ''
#              The tone-mapping desaturation.
#            '';
#          };
        
#          tonemappingPeak = mkOption {
#            type = types.number;
#            default = 100;
#            description = mdDocs ''
#              The tone-mapping peak.
#            '';
#          };
        
#          tonemappingParam = mkOption {
#            type = types.number;
#            default = 0;
#            description = mdDocs ''
#              The tone-mapping parameters.
#            '';
#          };        
#          vppTonemappingBrightness = mkOption {
#            type = types.number;
#            default = 16;
#            description = mdDocs ''
#              The VPP tone-mapping brightness.
#            '';
#          };        
#          vppTonemappingContrast = mkOption {
#            type = types.number;
#            default = 1;
#            description = mdDocs ''
#              The VPP tone-mapping contrast.
#            '';
#          };       
#          h264Crf = mkOption {
#            type = types.int;
#            default = 23;
#            description = mdDocs ''
#              The H264 CRF.
#            '';
#          };     
#          h265Crf = mkOption {
#            type = types.int;
#            default = 28;
#            description = mdDocs ''
#              The H265 CRF.
#            '';
#          };
        
#          encoderPreset = mkOption {
#            type = types.enum [
##              "auto"
#              "placebo"
#              "veryslow"
#              "slower"
#              "slow"
#              "medium"
#              "fast"
#              "faster"
#              "veryfast"
#              "superfast"
#              "ultrafast"
#            ];
#            default = "auto";
#            description = mdDocs ''
#              The encoder preset.
#            '';
#          };        
#          deinterlaceDoubleRate = mkOption {
#            type = types.bool;
#            default = false;
#            description = mdDocs ''
#              Value indicating whether the framerate is doubled when deinterlacing.
#            '';
#          };        
#          deinterlaceMethod = mkOption {
#            type = types.enum ["yadif" "bwdif"];
#            default = "yadif";
#            description = mdDocs ''
#              The deinterlace method.
#            '';
#          };        
#          enableDecodingColorDepth10Hevc = mkOption {
#            type = types.bool;
#            default = true;
#            description = mdDocs ''
#              Value indicating whether 10bit HEVC decoding is enabled.
#            '';
#          }; 
          enableDecodingColorDepth10Vp9 = mkOption {
            type = types.bool;
            default = true;
            description = mdDocs ''
              Value indicating whether 10bit VP9 decoding is enabled.
            '';
          };      
#          enableEnhancedNvdecDecoder = mkOption {
#            type = types.bool;
#            default = true;
#            description = mdDocs ''
#              Value indicating whether the enhanced NVDEC is enabled.\
#              Enhanced Nvdec or system native decoder is required for DoVi to SDR tone-mapping.
#            '';
#          };   
#          preferSystemNativeHwDecoder = mkOption {
#            type = types.bool;
#            default = true;
#            description = mdDocs ''
#              Value indicating whether the system native hardware decoder should be used.
#            '';
#          };        
#          enableIntelLowPowerH264HwEncoder = mkOption {
#            type = types.bool;
#            default = false;
#            description = mdDocs ''
#              Value indicating whether the Intel H264 low-power hardware encoder should be used.
#            '';
#          };        
#          enableIntelLowPowerHevcHwEncoder = mkOption {
#            type = types.bool;
#            default = false;
#            description = mdDocs ''
#              Value indicating whether the Intel HEVC low-power hardware encoder should be used.
#            '';
#          };
        
#          enableHardwareEncoding = mkOption {
#            type = types.bool;
#            default = true;
#            description = mdDocs ''
#              Value indicating whether hardware encoding is enabled.
#            '';
#          };     
          allowHevcEncoding = mkOption {
            type = types.bool;
            default = false;
            description = mdDocs ''
              Value indicating whether HEVC encoding is enabled.
            '';
          };
        
          # TODO: add to encoding.nix
          allowAv1Encoding = mkOption {
            type = types.bool;
            default = false;
            description = mdDocs ''
              Value indicating whether AV1 encoding is enabled.
            '';
          };
        
          # TODO: add to encoding.nix
          allowMjpegEncoding = mkOption {
            type = types.bool;
            default = false;
            description = mdDocs ''
              Value indicating whether MJPEG encoding is enabled.
            '';
          };
        
          enableSubtitleExtraction = mkOption {
            type = types.bool;
            default = true;
            description = mdDocs ''
              Value indicating whether subtitle extraction is enabled.
            '';
          };
        
          hardwareDecodingCodecs = mkOption {
            type = with types; listOf (enum ["h264" "hevc" "mpeg2video" "mpeg4" "vc1" "vp8" "vp9" "av1"]);
            default = ["h264" "vc1"];
            description = mdDocs ''
              The codecs hardware encoding is used for.
            '';
          };
        
          allowOnDemandMetadataBasedKeyframeExtractionForExtensions = mkOption {
            type = with types; listOf (enum ["mkv"]);
            default = ["mkv"];
            description = mdDocs ''
              The file extensions on-demand metadata based keyframe extraction is enabled for.
            '';
          };
        };
        
        metadata = {
          useFileCreationTimeForDateAdded = mkOption {
            type = types.bool;
            default = true;
            description = mdDocs ''
              If a metadata value is present, it will always be used before either of the options.
            '';
          };        
        };
        
        server = {
          enableMetrics = mkOption {
            type = types.bool;
            default = false;
            description = mdDocs ''
              Value indicating whether to enable prometheus metrics exporting.
            '';
          };
        
          enableNormalizedItemByNameIds = mkOption {
            type = types.bool;
            default = true;
            description = mdDocs '''';
          };
        
          isPortAuthorized = mkOption {
            type = types.bool;
            default = true; # FIXME: is this really the default?
            description = mdDocs ''
              Value indicating whether this instance is port authorized.
            '';
          };
        
          quickConnectAvailable = mkOption {
            type = types.bool;
            default = true;
            description = mdDocs ''
              Value indicating whether quick connect is available for use on this server.
            '';
          };
        
          enableCaseSensitiveItemIds = mkOption {
            type = types.bool;
            default = true;
            description = mdDocs '''';
          };
        
          disableLiveTvChannelUserDataName = mkOption {
            type = types.bool;
            default = true;
            description = mdDocs '''';
          };
        
          metadataPath = mkOption {
            type = types.str;
            default = "${jellyConfig.dataDir}/metadata";
            description = mdDocs ''
              The metadata path.
            '';
          };
        
          metadataNetworkPath = mkOption {
            type = with types; nullOr str;
            default = null;
            description = mdDocs '''';
          };
        
          preferredMetadataLanguage = mkOption {
            type = types.str;
            default = "en";
            description = mdDocs ''
              The preferred metadata language.
            '';
          };
        
          metadataCountryCode = mkOption {
            type = types.str;
            default = "US";
            description = mdDocs ''
              The metadata country code.
            '';
          };
        
          sortReplaceCharacters = mkOption {
            type = with types; listOf str;
            default = ["." "+" "%"];
            description = mdDocs ''
              Characters to be replaced with a ' ' in strings to create a sort name.
            '';
          };
        
          sortRemoveCharacters = mkOption {
            type = with types; listOf str;
            default = ["," "&amp;" "-" "{" "}" "'"];
            description = mdDocs ''
              Characters to be removed from strings to create a sort name.
            '';
          };
        
          sortRemoveWords = mkOption {
            type = with types; listOf str;
            default = ["the" "a" "an"];
            description = mdDocs ''
              Words to be removed from strings to create a sort name.
            '';
          };
        
          minResumePct = mkOption {
            type = types.int;
            default = 5;
            description = mdDocs ''
              The minimum percentage of an item that must be played in order for playstate to be updated.
            '';
          };
        
          maxResumePct = mkOption {
            type = types.int;
            default = 90;
            description = mdDocs ''
              The maximum percentage of an item that can be played while still saving playstate. If this percentage is crossed playstate will be reset to the beginning and the item will be marked watched.
            '';
          };
        
          minResumeDurationSeconds = mkOption {
            type = types.int;
            default = 300;
            description = mdDocs ''
              The minimum duration that an item must have in order to be eligible for playstate updates..
            '';
          };
        
          minAudiobookResume = mkOption {
            type = types.int;
            default = 5;
            description = mdDocs ''
              The minimum minutes of a book that must be played in order for playstate to be updated.
            '';
          };
          maxAudiobookResume = mkOption {
            type = types.int;
            default = 5;
            description = mdDocs ''
              The remaining minutes of a book that can be played while still saving playstate. If this percentage is crossed playstate will be reset to the beginning and the item will be marked watched.
            '';
          };
        
          # TODO: add to system.nix
          inactiveSessionThreshold = mkOption {
            type = types.int;
            default = 10;
            description = mdDocs ''
              The threshold in minutes after a inactive session gets closed automatically.!
              If set to 0 the check for inactive sessions gets disabled.
            '';
          };
        
          libraryMonitorDelay = mkOption {
            type = types.int;
            default = 60;
            description = mdDocs ''
              The delay in seconds that we will wait after a file system change to try and discover what has been added/removed\
              Some delay is necessary with some items because their creation is not atomic.  It involves the creation of several different directories and files.
            '';
          };   
          # TODO: add to system.nix
          libraryUpdateDuration = mkOption {
            type = types.int;
            default = 30;
            description = mdDocs ''
              The duration in seconds that we will wait after a library updated event before executing the library changed notification.
            '';
          };        
          imageSavingConvention = mkOption {
            type = types.enum ["Legacy" "Compatible"];
            default = "Legacy";
            description = mdDocs ''
              The image saving convention.
            '';
          };
        
          metadataOptions = mkOption {
            description = mdDocs '''';
            type = with types;
              listOf (submodule {
                options = {
                  itemType = mkOption {
                    type = enum [
                      "Book"
                      "Movie"
                      "MusicVideo"
                      "Series"
                      "MusicAlbum"
                      "MusicArtist"
                      "BoxSet"
                      "Season"
                      "Episode"
                    ];
                  };
                  disabledMetadataSavers = mkOption {
                    type = nullOr (listOf str);
                    default = null;
                  };
                  localMetadataReaderOrder = mkOption {
                    type = nullOr (listOf str);
                    default = null;
                  };
                  disabledMetadataFetchers = mkOption {
                    type = nullOr (listOf str);
                    default = null;
                  };
                  metadataFetcherOrder = mkOption {
                    type = nullOr (listOf str);
                    default = null;
                  };
                  disabledImageFetchers = mkOption {
                    type = nullOr (listOf str);
                    default = null;
                  };
                  imageFetcherOrder = mkOption {
                    type = nullOr (listOf str);
                    default = null;
                  };
                };
              });
            default = [
              {itemType = "Book";}
              {itemType = "Movie";}
              {
                itemType = "MusicVideo";
                disabledMetadataFetchers = ["The Open Movie Database"];
                disabledImageFetchers = ["The Open Movie Database"];
              }
              {itemType = "Series";}
              {
                itemType = "MusicAlbum";
                disabledMetadataFetchers = ["TheAudioDB"];
              }
              {
                itemType = "MusicArtist";
                disabledMetadataFetchers = ["TheAudioDB"];
              }
              {itemType = "BoxSet";}
              {itemType = "Season";}
              {itemType = "Episode";}
            ];
          };
        
          skipDeserializationForBasicTypes = mkOption {
            type = types.bool;
            default = true;
            description = mdDocs '''';
          };        
          serverName = mkOption {
            type = types.str;
            default = config.networking.hostName;
            description = mdDocs '''';
          };        
          # XML name is UICulture
          displayLanguage = mkOption {
            type = types.str;
            default = "en-US";
            description = mdDocs '''';
          };
        
          saveMetadataHidden = mkOption {
            type = types.bool;
            default = false;
            description = mdDocs '''';
          };
        
          # FIXME: what is this?
          # public NameValuePair[] ContentTypes { get; set; } = Array.Empty<NameValuePair>();
          contentTypes = mkOption {
            type = with types; nullOr (listOf str);
            default = null;
            description = mdDocs '''';
          };
        
          remoteClientBitrateLimit = mkOption {
            type = types.int;
            default = 0;
            description = mdDocs '''';
          };        
          enableFolderView = mkOption {
            type = types.bool;
            default = false;
            description = mdDocs '''';
          };        
          enableGroupingIntoCollections = mkOption {
            type = types.bool;
            default = false;
            description = mdDocs '''';
          };        
          displaySpecialsWithinSeasons = mkOption {
            type = types.bool;
            default = true;
            description = mdDocs '''';
          };        
          # FIXME: what is this?
          # public string[] CodecsUsed { get; set; } = Array.Empty<string>();
          codecsUsed = mkOption {
            type = with types; nullOr (listOf str);
            default = null;
            description = mdDocs '''';
          };
        
          pluginRepositories = mkOption {
            description = mdDocs '''';
            type = with types;
              listOf (submodule {
                options = {
                  name = mkOption {
                    type = types.str;
                  };
                  url = mkOption {
                    type = types.str;
                  };
                  enable = mkOption {
                    type = types.bool;
                    default = true;
                  };
                };
              });
            default = [
              {
                name = "Jellyfin Stable";
                url = "https://repo.jellyfin.org/releases/plugin/manifest-stable.json";
              }
            ];
          };
        
          enableExternalContentInSuggestions = mkOption {
            type = types.bool;
            default = true;
            description = mdDocs '''';
          };
        
          imageExtractionTimeoutMs = mkOption {
            type = types.int;
            default = 0;
            description = mdDocs '''';
          };
        
          # FIXME: what is this?
          # public PathSubstitution[] PathSubstitutions { get; set; } = Array.Empty<PathSubstitution>();
          pathSubstitutions = mkOption {
            type = with types; nullOr (listOf str);
            default = null;
            description = mdDocs '''';
          };
        
          enableSlowResponseWarning = mkOption {
            type = types.bool;
            default = true;
            description = mdDocs ''
              Value indicating whether slow server responses should be logged as a warning.
            '';
          };
        
          slowResponseThresholdMs = mkOption {
            type = types.int;
            default = 500;
            description = mdDocs ''
              The threshold for the slow response time warning in ms.
            '';
          };
        
          corsHosts = mkOption {
            type = with types; listOf str;
            default = ["*"];
            description = mdDocs ''
              The cors hosts.
            '';
          };
        
          activityLogRetentionDays = mkOption {
            type = types.int;
            default = 30;
            description = mdDocs ''
              The number of days we should retain activity logs.
            '';
          };
        
          libraryScanFanoutConcurrency = mkOption {
            type = types.int;
            default = 0;
            description = mdDocs ''
              How the library scan fans out.
            '';
          };
        
          libraryMetadataRefreshConcurrency = mkOption {
            type = types.int;
            default = 0;
            description = ''
              How many metadata refreshes can run concurrently.
            '';
          };
        
          removeOldPlugins = mkOption {
            type = types.bool;
            default = false;
            description = mdDocs ''
              Value indicating whether older plugins should automatically be deleted from the plugin folder.
            '';
          };
        
          allowClientLogUpload = mkOption {
            type = types.bool;
            default = true;
            description = mdDocs ''
              Value indicating whether clients should be allowed to upload logs.
            '';
          };
        
          # TODO: add all the following to system.nix
          dummyChapterDuration = mkOption {
            type = types.int;
            default = 0;
            description = mdDocs ''
              The dummy chapter duration in seconds, use 0 (zero) or less to disable generation alltogether.
            '';
          };
        
          chapterImageResolution = mkOption {
            type = types.enum ["matchsource" "p144" "p240" "p360" "p480" "p720" "p1080" "p1440" "p2160"];
            default = "matchsource";
            description = mdDocs ''
              The chapter image resolution.
            '';
          };
        
          parallelImageEncodingLimit = mkOption {
            type = types.int;
            default = 0;
            description = mdDocs ''
              The limit for parallel image encoding.
            '';
          };
        
          # FIXME: in what file does this go to?
          castReceiverApplications = mkOption {
            default = null;
            type = with types;
              nullOr (listOf (submodule {
                options = {
                  id = mkOption {
                    type = str;
                    description = mdDocs ''
                      The cast receiver application id.
                    '';
                  };
                  name = mkOption {
                    type = str;
                    description = mdDocs ''
                      The cast receiver application name.
                    '';
                  };
                };
              }));
          };
        };
