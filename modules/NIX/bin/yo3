#!/usr/bin/env python

import os
import click
import subprocess
from pathlib import Path

CONTEXT_SETTINGS = dict(help_option_names=['-h', '--help'])
XDG_CONFIG_HOME = os.getenv('XDG_CONFIG_HOME', os.path.expanduser('~/.config'))

class YoConfig:
    def __init__(self):
        self.config_path = Path(XDG_CONFIG_HOME) / 'yo/config.toml'
        self.hosts_dir = Path(__file__).parent.parent / 'hosts'
        self.hooks_dir = Path(XDG_CONFIG_HOME) / 'yo/hooks.d'
        
        # Load config if exists
        if self.config_path.exists():
            self.config = self._load_config()
        else:
            self.config = {}

    def _load_config(self):
        # Implement TOML/YAML config parsing
        return {}

@click.group(context_settings=CONTEXT_SETTINGS)
@click.pass_context
def cli(ctx):
    """Yo - Grossly Incandescent System Management"""
    ctx.obj = YoConfig()

# Host Operations
@cli.group()
def host():
    """Manage NixOS hosts"""
    pass

@host.command()
@click.argument('hostname')
@click.option('--dry-run', is_flag=True)
def build(hostname, dry_run):
    """Build host configuration"""
    click.secho(f"üöÄ Building {hostname}", fg='green')
    
    # Execute pre-build hooks
    if os.path.exists(f"{XDG_CONFIG_HOME}/yo/hooks.d/pre-build"):
        subprocess.run(["bash", "-c", f"source {XDG_CONFIG_HOME}/yo/hooks.d/pre-build"])

    cmd = ["nix", "build", f".#nixosConfigurations.{hostname}.config.system.build.toplevel"]
    if dry_run:
        cmd.append("--dry-run")
    
    try:
        subprocess.run(cmd, check=True)
        click.secho("‚úÖ Build successful", fg='green')
    except subprocess.CalledProcessError:
        click.secho("‚ùå Build failed", fg='red', err=True)
        raise click.Abort()

# Secret Management
@cli.group()
def secret():
    """Manage encrypted secrets"""
    pass

@secret.command()
@click.argument('name')
def create(name):
    """Create new secret"""
    click.secho(f"üîë Creating secret {name}", fg='yellow')
    subprocess.run(["agenix", "-e", f"{name}.age"])

# Hook System
@cli.group()
def hook():
    """Manage hook scripts"""
    pass

@hook.command()
@click.argument('name')
def add(name):
    """Create new hook template"""
    hook_path = Path(XDG_CONFIG_HOME) / f"yo/hooks.d/{name}"
    hook_path.write_text(f"""#!/bin/bash
# {name} hook
echo "Running {name} hook"
""")
    click.secho(f"üìù Created hook: {hook_path}", fg='blue')

if __name__ == "__main__":
    cli()
